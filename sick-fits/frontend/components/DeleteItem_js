import React, { Component } from 'react';
import { Mutation } from 'react-apollo';
import gql from 'graphql-tag';
import { ALL_ITEMS_QUERY } from './Items';
import { perPage } from '../config';

const DELETE_ITEM_MUTATION = gql`
  mutation DELETE_ITEM_MUTATION($id: ID!) {
    deleteItem(id: $id) {
      id
    }
  }
`;

class DeleteItem extends Component {
  update = (client, cache, payload) => {
    // manually update the cache on the client, so it matches the server
    // 1. REad the cache for the items we want
    console.log('update payload -', payload);
    console.log('cache: before delete item -', cache);
    console.log('client: before delete item -', client);
    // console.log('update this.props.page -', this.props.page);
    const dataCache = cache.readQuery({
      query: ALL_ITEMS_QUERY,
      // variables: {
      //   skip: this.props.page * perPage - perPage,
      //   first: perPage,
      //   orderBy: 'createdAt_DESC',
      // },
    });
    const delItemId = cache.data.deleteItem.id;
    console.log('update delItemId: before delete item -', delItemId);
    console.log('update data: before delete item -', dataCache);
    // 2. Filter the deleted item out of the page
    dataCache.items = dataCache.items.filter(
      // item => item.id !== payload.data.deleteItem.id
      item => item.id !== delItemId
    );
    console.log('update data: AFTER delete item -', dataCache);
    // 3. Put the items back
    cache.writeQuery({ query: ALL_ITEMS_QUERY, dataCache });
  };

  render() {
    // console.log('this.props.id -', this.props.id);
    // console.log('DeleteItem component this.props', this.props);
    return (
      <Mutation
        mutation={DELETE_ITEM_MUTATION}
        variables={{ id: this.props.id }}
        update={this.update}
        // refetchQueries={[{ query: ALL_ITEMS_QUERY }]}
      >
        {(deleteItem, { error }) => (
          <button
            onClick={() => {
              if (confirm('Are you sure want to delete this item?')) {
                deleteItem();
              }
            }}
          >
            {this.props.children}
          </button>
        )}
      </Mutation>
    );
  }
}

export default DeleteItem;
